# backend/agents/builders/yaml_agent_writer.py

from pathlib import Path
import logging
from typing import Any, Dict
from ...config import settings
from ..utils import ensure_dirs

logger = logging.getLogger(__name__)

# Template for Agent Builder YAML
_AGENT_YAML_TEMPLATE = """\
name: {agent_name}
description: "{description}"
toolkit_references:
{toolkit_refs}
steps:
{steps}
"""


async def build(plan: Dict[str, Any], framework: str) -> None:
    """
    Write the final Agent‑Builder YAML based on the build plan.

    Parameters
    ----------
    plan : dict
        Must include:
          • 'selected_framework': str
          • 'build_tasks': List[{'kind': str, 'name': str, 'gateway'?: str}]
          • optionally 'agent_name' and 'description'
    framework : str
        Target framework (e.g. "watsonx_orchestrate").
    """
    # Extract metadata (with sensible defaults)
    agent_name = plan.get("agent_name", "agent")
    description = plan.get("description", "Generated by Agent Generator")
    tasks = plan.get("build_tasks", [])

    # Build unique toolkit references and step definitions
    toolkit_ids = set()
    step_lines = []
    for t in tasks:
        kind = t["kind"]
        if kind == "python_tool":
            name = t["name"]
            toolkit_ids.add(f"  - id: toolkit:{name}")
            step_lines.append(
                f"  - id: {name}\n"
                f"    type: tool\n"
                f"    tool_id: toolkit:{name}:{name}.run\n"
            )
        elif kind == "mcp_tool":
            gw = t["gateway"]
            toolkit_ids.add(f"  - id: toolkit:{gw}")
            # Assuming tool name matches gateway for simplicity
            step_lines.append(
                f"  - id: {gw}\n"
                f"    type: tool\n"
                f"    tool_id: toolkit:{gw}\n"
            )

    toolkit_refs_str = "\n".join(sorted(toolkit_ids))
    steps_str = "\n".join(step_lines)

    # Render YAML content
    yaml_content = _AGENT_YAML_TEMPLATE.format(
        agent_name=agent_name,
        description=description,
        toolkit_refs=toolkit_refs_str,
        steps=steps_str,
    )

    # Ensure destination directory exists
    dest = settings.build_base / framework / "agents"
    ensure_dirs([dest])

    # Write out the YAML file
    file_path = dest / f"{agent_name}.yaml"
    file_path.write_text(yaml_content, encoding="utf-8")
    logger.info("Wrote agent YAML to %s", file_path)
